/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.analytics.financial.instrument.index;

import org.apache.commons.lang.ObjectUtils;
import org.threeten.bp.ZonedDateTime;

import com.opengamma.analytics.financial.instrument.annuity.AnnuityDefinition;
import com.opengamma.analytics.financial.instrument.payment.CouponDefinition;
import com.opengamma.analytics.financial.instrument.swap.SwapDefinition;
import com.opengamma.util.ArgumentChecker;

/**
 * Class with the description of Ibor compounding vs Ibors.
 */
public class GeneratorSwapIborCompoundingIbor extends GeneratorInstrument<GeneratorAttributeIROTC> {

  /**
   * The Ibor leg with compounding generator. Not null.
   */
  private final GeneratorLegIborCompounding _iborCmpLegGenerator;
  /**
   * The second Ibor leg generator. Not null.
   */
  private final GeneratorLegIbor _iborLegGenerator;
  
 /**
  * Constructor from two legs.
  * @param name The generator name.
  * @param iborCmpLegGenerator The Ibor leg with compounding generator.
  * @param iborLegGenerator The second Ibor leg generator.
  */
  public GeneratorSwapIborCompoundingIbor(final String name, final GeneratorLegIborCompounding iborCmpLegGenerator, final GeneratorLegIbor iborLegGenerator) {
    super(name);
    ArgumentChecker.notNull(iborCmpLegGenerator, "first ibor leg generator");
    ArgumentChecker.notNull(iborLegGenerator, "second ibor leg generator");
    _iborCmpLegGenerator = iborCmpLegGenerator;
    _iborLegGenerator = iborLegGenerator;
  }

 /**
  * Returns the swap generator for the Ibor leg with compounding.
  * @return The generator.
  */
  public GeneratorLegIborCompounding getIborCompoundingLegGenerator() {
    return _iborCmpLegGenerator;
  }

 /**
  * Returns the swap generator for the Ibor leg.
  * @return The generator.
  */
  public GeneratorLegIbor getSecondIborLegGenerator() {
    return _iborLegGenerator;
  }
  
  /**
   * {@inheritDoc}
   * Swap with each leg generated by the respective leg generators. The spread is on the first leg, which is a payer leg.
   */
  @Override
  public SwapDefinition generateInstrument(final ZonedDateTime tradeDate, final double spread, final double notional, final GeneratorAttributeIROTC attribute) {
    ArgumentChecker.notNull(tradeDate, "Reference date");
    ArgumentChecker.notNull(attribute, "Attributes");
    final AnnuityDefinition<? extends CouponDefinition> iborLeg1 = _iborCmpLegGenerator.generateInstrument(tradeDate, spread, notional, attribute, true);
    final AnnuityDefinition<? extends CouponDefinition> iborLeg2 = _iborLegGenerator.generateInstrument(tradeDate, notional, attribute, false);
    return new SwapDefinition(iborLeg1, iborLeg2);
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = super.hashCode();
    result = prime * result + _iborCmpLegGenerator.hashCode();
    result = prime * result + _iborLegGenerator.hashCode();
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (!super.equals(obj)) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    GeneratorSwapIborCompoundingIbor other = (GeneratorSwapIborCompoundingIbor) obj;
    if (!ObjectUtils.equals(_iborCmpLegGenerator, other._iborCmpLegGenerator)) {
      return false;
    }
    if (!ObjectUtils.equals(_iborLegGenerator, other._iborLegGenerator)) {
      return false;
    }
    return true;
  }

}
