/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master;

import java.net.URI;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.util.ArgumentChecker;

/**
 *
 */
@BeanDefinition
public final class RemoteComponentInfo<T> implements ImmutableBean {

  @PropertyDefinition(validate = "notNull")
  private final Class<T> type;

  @PropertyDefinition(validate = "notNull")
  private final Class<? extends T> remoteType;

  @PropertyDefinition(validate = "notNull")
  private final URI uri;

  @ImmutableConstructor
  public RemoteComponentInfo(Class<T> type, Class<? extends T> remoteType, URI uri) {
    this.type = ArgumentChecker.notNull(type, "type");
    this.remoteType = ArgumentChecker.notNull(remoteType, "remoteType");
    this.uri = ArgumentChecker.notNull(uri, "uri");
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code RemoteComponentInfo}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static RemoteComponentInfo.Meta meta() {
    return RemoteComponentInfo.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code RemoteComponentInfo}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> RemoteComponentInfo.Meta<R> metaRemoteComponentInfo(Class<R> cls) {
    return RemoteComponentInfo.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(RemoteComponentInfo.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @param <T>  the type
   * @return the builder, not null
   */
  public static <T> RemoteComponentInfo.Builder<T> builder() {
    return new RemoteComponentInfo.Builder<T>();
  }

  @SuppressWarnings("unchecked")
  @Override
  public RemoteComponentInfo.Meta<T> metaBean() {
    return RemoteComponentInfo.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the type.
   * @return the value of the property, not null
   */
  public Class<T> getType() {
    return type;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the remoteType.
   * @return the value of the property, not null
   */
  public Class<? extends T> getRemoteType() {
    return remoteType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the uri.
   * @return the value of the property, not null
   */
  public URI getUri() {
    return uri;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder<T> toBuilder() {
    return new Builder<T>(this);
  }

  @Override
  public RemoteComponentInfo<T> clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RemoteComponentInfo<?> other = (RemoteComponentInfo<?>) obj;
      return JodaBeanUtils.equal(getType(), other.getType()) &&
          JodaBeanUtils.equal(getRemoteType(), other.getRemoteType()) &&
          JodaBeanUtils.equal(getUri(), other.getUri());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRemoteType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUri());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("RemoteComponentInfo{");
    buf.append("type").append('=').append(getType()).append(',').append(' ');
    buf.append("remoteType").append('=').append(getRemoteType()).append(',').append(' ');
    buf.append("uri").append('=').append(JodaBeanUtils.toString(getUri()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RemoteComponentInfo}.
   */
  public static final class Meta<T> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code type} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Class<T>> _type = DirectMetaProperty.ofImmutable(
        this, "type", RemoteComponentInfo.class, (Class) Class.class);
    /**
     * The meta-property for the {@code remoteType} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Class<? extends T>> _remoteType = DirectMetaProperty.ofImmutable(
        this, "remoteType", RemoteComponentInfo.class, (Class) Class.class);
    /**
     * The meta-property for the {@code uri} property.
     */
    private final MetaProperty<URI> _uri = DirectMetaProperty.ofImmutable(
        this, "uri", RemoteComponentInfo.class, URI.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "type",
        "remoteType",
        "uri");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3575610:  // type
          return _type;
        case 1041328288:  // remoteType
          return _remoteType;
        case 116076:  // uri
          return _uri;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public RemoteComponentInfo.Builder<T> builder() {
      return new RemoteComponentInfo.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends RemoteComponentInfo<T>> beanType() {
      return (Class) RemoteComponentInfo.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code type} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Class<T>> type() {
      return _type;
    }

    /**
     * The meta-property for the {@code remoteType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Class<? extends T>> remoteType() {
      return _remoteType;
    }

    /**
     * The meta-property for the {@code uri} property.
     * @return the meta-property, not null
     */
    public MetaProperty<URI> uri() {
      return _uri;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3575610:  // type
          return ((RemoteComponentInfo<?>) bean).getType();
        case 1041328288:  // remoteType
          return ((RemoteComponentInfo<?>) bean).getRemoteType();
        case 116076:  // uri
          return ((RemoteComponentInfo<?>) bean).getUri();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code RemoteComponentInfo}.
   */
  public static final class Builder<T> extends DirectFieldsBeanBuilder<RemoteComponentInfo<T>> {

    private Class<T> type;
    private Class<? extends T> remoteType;
    private URI uri;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(RemoteComponentInfo<T> beanToCopy) {
      this.type = beanToCopy.getType();
      this.remoteType = beanToCopy.getRemoteType();
      this.uri = beanToCopy.getUri();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3575610:  // type
          return type;
        case 1041328288:  // remoteType
          return remoteType;
        case 116076:  // uri
          return uri;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3575610:  // type
          this.type = (Class<T>) newValue;
          break;
        case 1041328288:  // remoteType
          this.remoteType = (Class<? extends T>) newValue;
          break;
        case 116076:  // uri
          this.uri = (URI) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T> setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public RemoteComponentInfo<T> build() {
      return new RemoteComponentInfo<T>(
          type,
          remoteType,
          uri);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code type} property in the builder.
     * @param type  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> type(Class<T> type) {
      JodaBeanUtils.notNull(type, "type");
      this.type = type;
      return this;
    }

    /**
     * Sets the {@code remoteType} property in the builder.
     * @param remoteType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> remoteType(Class<? extends T> remoteType) {
      JodaBeanUtils.notNull(remoteType, "remoteType");
      this.remoteType = remoteType;
      return this;
    }

    /**
     * Sets the {@code uri} property in the builder.
     * @param uri  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> uri(URI uri) {
      JodaBeanUtils.notNull(uri, "uri");
      this.uri = uri;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("RemoteComponentInfo.Builder{");
      buf.append("type").append('=').append(JodaBeanUtils.toString(type)).append(',').append(' ');
      buf.append("remoteType").append('=').append(JodaBeanUtils.toString(remoteType)).append(',').append(' ');
      buf.append("uri").append('=').append(JodaBeanUtils.toString(uri));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
